September 8th
GIT --> Client Software , its to enable tracking
Github --> Service provider, its a storage for storing the code

Workflow:
1. create gitbut account ;
	create repositry (project + version history) --> Remote repository 
2. write code on the local machine
	cloning: copy of the remote repository in the machine 
		saved copy of remote repository is called local repository
			Working copy - start working here
			| (staging / adding changes)
			Staging copy
			| (semi finalized) - can undo the code back to the working copy, called as unstaging
			local copy 
			| commit changes , this is the final stage of finalzing code to local repository, aka commit the code to local repository
	Write code --> stage code --> commit code ( local machine repository)
3. Pushing the code to remote repository ( in git hub) 

Setting up in gitbash, authentication from local machine to github
	git config --global user.name dhirajmedapati
	git config --global user.email dhiraj.medapati@gmail.com
	
Low level languages - binary language - machine interaction language 

Python is a high level language, for developing applications, used for software level , application level 
	our code will be converted to ascii language to binary
General purpose language --> can be used in various domains, not just 1 domain, can develop desktop apps, web apps, API, automation scripts, etc
Domain specific language --> like sql, we can do only to code for DB, but not for anything else

Approach to a programming solution is known as programming paradigm , different styles to handle a solution, python is known for being multi paradigm 
	Imperative approach --> how to do something in the code ; object oriented approach( widely used in programming)
	Declarative approach --> what to do, rather than how to do ; functional style programming ( data oriented applications)
	
Python is a dynamic language, no need to define data types (type checked) , it automatically detects the type, unless specified otherwise, its called typecasting where we predefine things and stop the auto detecting the type itself. 

9th september

Write code and develop apps
	script mode
	command line mode
Learning python ( programming language) 

Python as a programming language, it has 35 keywords
Syntax: Rules and guidelines - cant just randomly use things, we have to follow a certain process for these

Keywords are predefined words, which holds some special meaning to python interpreter 

Python is best prototype language for POC ( proof of concept) 
python is dynamic typed ( no need to define things, auto detectable)
vast libraries from community and open sources
multi paradigm


Variables: 
	Names for memory(RAM) locations
	variables allow you to assign data, retrive data and manipulate the data (if needed)
	should be followed in syntax
	variable name should be identifier compliant
	variable_name = value ; value can be anything, either numeric or string, but strings should be defined under annotations, single quote or double quotes
	= is called as assignment operator
In python the type of variable can change during execution
A function does a task
type () : used to specify the data type for a variable

10th September
==============

--> output can be derived using print ()
-> concatenation : joining strings using + operator
	+ can be used to join strings and add numerics depending on the defined variable
	we cannot add a string and number in a single output using just the operators 

Interpolation: replacing placeholders with actual values
	supports only from python 3 onwards
	we use {} with f-strings , aka string formatted lierals

We can define multiple variables / numerics using , in  single line, but LHS should be equal to RHS
Example: x,y,z = 10,20,30

Multiple values can be assigned to a single variable using = 
ex: a = b = c = 10

--> Operators
	Special symbols that perform operations on variables and values. 
	Operator categorization
		Arthmetic operators: mathematical operations ; + - * / %
		// floor division but rounds of the value to the lowest integer 
		** exponential , for powers
	Compound assignment operators
		combine arthemetic operators with assignment operator (=)
		used for concise code (short hand code)
		+= *= -= /= 
	Comparison operators
		used to compare values
		output is True or false (boolean)
		Primarily used with condition ; like yes or no statements kind

		== (to compare values)
		!= (not equal to)
		>
		<
		>=
		<=
	
	Logical Operators
		used to combine multiple conditions

		and , or, not

	Membership operators
		used if a squence is present
			in: return true if specified input is in given sequence
			not in: return true if specified input in not in given sequence
	
	Identity Operators
		used to compare objects (memory)

			== used to compare values
		is: returns true if both objects are same
		is not: returns true is both obects are not same
	
	Bitwise operators
		used in low level languages
		they perform binary level comparison (0 1)
		they use the truth table for this, AND OR XOR etc
		AND --> & 
		OR --> |