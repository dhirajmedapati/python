September 8th
GIT --> Client Software , its to enable tracking
Github --> Service provider, its a storage for storing the code

Workflow:
1. create gitbut account ;
	create repositry (project + version history) --> Remote repository 
2. write code on the local machine
	cloning: copy of the remote repository in the machine 
		saved copy of remote repository is called local repository
			Working copy - start working here
			| (staging / adding changes)
			Staging copy
			| (semi finalized) - can undo the code back to the working copy, called as unstaging
			local copy 
			| commit changes , this is the final stage of finalzing code to local repository, aka commit the code to local repository
	Write code --> stage code --> commit code ( local machine repository)
3. Pushing the code to remote repository ( in git hub) 

Setting up in gitbash, authentication from local machine to github
	git config --global user.name dhirajmedapati
	git config --global user.email dhiraj.medapati@gmail.com
	
Low level languages - binary language - machine interaction language 

Python is a high level language, for developing applications, used for software level , application level 
	our code will be converted to ascii language to binary
General purpose language --> can be used in various domains, not just 1 domain, can develop desktop apps, web apps, API, automation scripts, etc
Domain specific language --> like sql, we can do only to code for DB, but not for anything else

Approach to a programming solution is known as programming paradigm , different styles to handle a solution, python is known for being multi paradigm 
	Imperative approach --> how to do something in the code ; object oriented approach( widely used in programming)
	Declarative approach --> what to do, rather than how to do ; functional style programming ( data oriented applications)
	
Python is a dynamic language, no need to define data types (type checked) , it automatically detects the type, unless specified otherwise, its called typecasting where we predefine things and stop the auto detecting the type itself. 

9th september

Write code and develop apps
	script mode
	command line mode
Learning python ( programming language) 

Python as a programming language, it has 35 keywords
Syntax: Rules and guidelines - cant just randomly use things, we have to follow a certain process for these

Keywords are predefined words, which holds some special meaning to python interpreter 

Python is best prototype language for POC ( proof of concept) 
python is dynamic typed ( no need to define things, auto detectable)
vast libraries from community and open sources
multi paradigm


Variables: 
	Names for memory(RAM) locations
	variables allow you to assign data, retrive data and manipulate the data (if needed)
	should be followed in syntax
	variable name should be identifier compliant
	variable_name = value ; value can be anything, either numeric or string, but strings should be defined under annotations, single quote or double quotes
	= is called as assignment operator
In python the type of variable can change during execution
A function does a task
type () : used to specify the data type for a variable

10th September
==============

--> output can be derived using print ()
-> concatenation : joining strings using + operator
	+ can be used to join strings and add numerics depending on the defined variable
	we cannot add a string and number in a single output using just the operators 

Interpolation: replacing placeholders with actual values
	supports only from python 3 onwards
	we use {} with f-strings , aka string formatted lierals

We can define multiple variables / numerics using , in  single line, but LHS should be equal to RHS
Example: x,y,z = 10,20,30

Multiple values can be assigned to a single variable using = 
ex: a = b = c = 10

--> Operators
	Special symbols that perform operations on variables and values. 
	Operator categorization
		Arthmetic operators: mathematical operations ; + - * / %
		// floor division but rounds of the value to the lowest integer 
		** exponential , for powers
	Compound assignment operators
		combine arthemetic operators with assignment operator (=)
		used for concise code (short hand code)
		+= *= -= /= 
	Comparison operators
		used to compare values
		output is True or false (boolean)
		Primarily used with condition ; like yes or no statements kind

		== (to compare values)
		!= (not equal to)
		>
		<
		>=
		<=
	
	Logical Operators
		used to combine multiple conditions

		and , or, not

	Membership operators
		used if a squence is present
			in: return true if specified input is in given sequence
			not in: return true if specified input in not in given sequence
	
	Identity Operators
		used to compare objects (memory)

			== used to compare values
		is: returns true if both objects are same
		is not: returns true is both obects are not same
	
	Bitwise operators
		used in low level languages
		they perform binary level comparison (0 1)
		they use the truth table for this, AND OR XOR etc
		AND --> & 
		OR --> |

11th September

--> Data types

datatypes are categories that defines a variable which will tell us what kind of data it can holds

--> Number types
	int : whole numbers, negative numbers, integers
	float : decimal numbers, 1.5, 10.0
	complex: a+ib (i is imaginary --> in python its j, not i)

--> Text type
	--> str: string is a sequence of characters enclosed in a ""

--> Boolean type
	--> bool: represents true / false

--> sequence type
	--> List: store multiple elements, seperated with , and delcared inside []
	--> tuple: store multiple elemends seperated with , and declared inside ()
	--> set: store multiple elements sperated with , and delcared inside {}
--> Mapping type
	--> dictionary : stores key value pairs (each pair is called item) seperated with , and declared inside {}
		example: emp_info = {"name": "dhiraj", "age":25,"city", "hyd"}
--> None type
	--> Nothing i.e represents No value / Absensce of Nothing
		x = None ; this type is called NoneType
--> User defined data types
	--> user can define their own data types based on requirements

Type Conversion
	--> convert one data type to another data type automatically 

Type Casting
	--> convert one data type to another data type manually

--> Control structures
	used to control the flow of execution

	--> types
		--> Conditional statements , Decision making statements

		--> looping statements , Iteration statements

		--> Branching statements , Jump statements

	Conditional statements (decision making statements)
		--> used to evaluate a condition and execute one block of code if the evalation is true
			and execute another block of code is the evaluation is false
		--> Types of conditional statements
			--> if Statement: run block of code if the condition is true
			--> if else statement: run block of code if the condition is true 
				and run another block of code if the condition if false
			--> elif ladder: runs multiple if else blocks
			--> match case statement: Alternative to if else, when you have multiple conditions
				for a single variable ; this started from python 3
Note: Indentation refers to spaces at the begining of the line that defines code blocks(conditionals, loops, classes etc)
Indentation has rules
either use a tab or spaces, but not both
	--> how many spaces (python recommended spaces are 4)
all lines in the same block must have same Indentation level

Note: to make apps more dynamic, giving the user to give input
	--> input() : function used to take input from the keyboard as a string

--> ternary operator: allows you to write if else in concise form; can only be used for single expression
	value_if_true if condition else value_if_false

	12th September
================

-> elif ladder used for multiple condition checks
-> match case , it is introduced in python 3.1 , used for multi conditions 

-> Nested conditionals
		Conditionals inside conditionals
-> looping statements
	iterative statements , one after another. 
	used to execute a block of code repeatedly based on a condition 
	->while loop ; runs a block of code as long as the condition is true, 
			used when we do not know no. of iterations in advance
	-> for loop ; used for iterating over a sequence / used when we know no of iterations in advance
		it is mainly used for working with sequences
	dir()
	used to list all the attributes and functionalities of an object
	if an object is iterable it has '__iter__'

	range()
	range is used to generate a sequence of numbers
	range(start, stop, step)
	start: starting value to generate sequence by default is 0 (included)
	stop: ending value to stop generating the sequence (excluded)
	step: increment the count default is 1

	15th September
	=============

	Nested loops contain, for loop and while loop, where we have outer 
	operator and inner operators

	Jumping and branching statements

	--> break: used to exit loop

	--> continue: skip current iteration in loop

	--> pass: its a placeholder and does nothing ; useful when we are 
		developing things and not sure what to do right now but 
		have a plan for it later on

--> strings
	most widely used in python
	string: sequence of characters enclosed in single or double quotes ( recommended) 
			triple quotes (not recommended)