September 8th
GIT --> Client Software , its to enable tracking
Github --> Service provider, its a storage for storing the code

Workflow:
1. create gitbut account ;
	create repositry (project + version history) --> Remote repository 
2. write code on the local machine
	cloning: copy of the remote repository in the machine 
		saved copy of remote repository is called local repository
			Working copy - start working here
			| (staging / adding changes)
			Staging copy
			| (semi finalized) - can undo the code back to the working copy, called as unstaging
			local copy 
			| commit changes , this is the final stage of finalzing code to local repository, aka commit the code to local repository
	Write code --> stage code --> commit code ( local machine repository)
3. Pushing the code to remote repository ( in git hub) 

Setting up in gitbash, authentication from local machine to github
	git config --global user.name dhirajmedapati
	git config --global user.email dhiraj.medapati@gmail.com
	
Low level languages - binary language - machine interaction language 

Python is a high level language, for developing applications, used for software level , application level 
	our code will be converted to ascii language to binary
General purpose language --> can be used in various domains, not just 1 domain, can develop desktop apps, web apps, API, automation scripts, etc
Domain specific language --> like sql, we can do only to code for DB, but not for anything else

Approach to a programming solution is known as programming paradigm , different styles to handle a solution, python is known for being multi paradigm 
	Imperative approach --> how to do something in the code ; object oriented approach( widely used in programming)
	Declarative approach --> what to do, rather than how to do ; functional style programming ( data oriented applications)
	
Python is a dynamic language, no need to define data types (type checked) , it automatically detects the type, unless specified otherwise, its called typecasting where we predefine things and stop the auto detecting the type itself. 


September 9th
=============

	-> Write Code and Develop Apps
		-> Script Mode (100% We Use) (IDE - Keep Code in Files)
		
		-> Command Line Mode (CLI) Use Command Prompt (CMD) (inside python shell) - 
			Code is temporary (Used To Do Quick Checks)

	-> Learning Python (programming language)

	-> Just like english, has alphabets and we forms words and sentences, 
		in similar way we are gonna use python

	-> English language has 26 alphabets (abcd.....z)

	-> python as a programming language has 35 keywords 

	-> Syntax : Rules & Guidelines 

		-> English 
			-> today i take class for 3 PM and 4:30 PM (invalid)
			-> Today i'm going take the class from 3 PM to 4:30 PM (valid)

	-> Keywords : Predefined words, which holds some special meaning to python interpreter

	-> List Of Keywords :  https://docs.python.org/3/reference/lexical_analysis.html#keywords

		False      await      else       import     pass
		None       break      except     in         raise
		True       class      finally    is         return
		and        continue   for        lambda     try
		as         def        from       nonlocal   while
		assert     del        global     not        with
		async      elif       if         or         yield

	-> Keywords cannot be identifiers(name)

	-> Keywords + Syntax = Application / Program

	-> Identifiers : In Python an identifier is the name used to identify

		-> variable
		-> function
		-> class
		-> methods
		-> modules
		-> etc

	-> Rules for Identifiers (naming)

		-> Can Contain

			-> letters (a-z, A-Z)
			-> digits (0-9)
			-> underscore (_)

		-> Must Start with

			-> A letter (a-z, A-Z)
			-> underscore (_)	

		-> NOTE : Cannot be keywords, Cannot Start with Digits, Case Sensitive
				name, Name, NAME (all the different)

	-> Why Python / Key Features Of Python

		-> It's EASY (**)

			-> Syntax 
			-> Execute
			-> Simplicity Of Language (space for indentation)

		-> Fewer Line Of Code (**)

			-> Addition Program in Python it's 3 lines
			-> Addition Program in Java it's 8 lines

		-> Interpreted (Python) vs Compiled (Java) (**)

			-> Performance(execution speed) -> FASTER -> Compiled 

			-> Performance(execution speed) -> SLOWER -> Interpreted

		-> Python is best Prototype Language

			-> Python Development Speed  - FASTEST

				-> Project To Build Custom Requirement : 6 Weeks

			-> Java Development Speed  - SLOWER

				-> Project To Build Custom Requirement : 3 Months

		-> Python is Dynamic typed (**)

		-> Vast Libraries from Community & Open Sources 

		-> Multi paradigm

	-> Variables

		-> Variables are names for memory(RAM) locations

		-> Variables Allow You to

			-> Assign Data
			-> Retrieve Data
			-> Manipulate Data (If Required)

		-> Syntax 

			-> variable_name = value
			   student_age = 30
			   = is called Assignment Operator	

		-> NOTE : In Python, the type of variable can change during the execution

		-> NOTE : A function does a task

		-> type() : Used to specify the data type for a variable

		-> id() : used to show the memory address of a variable

September 10th
==============

-> Output the variables using print()

-> Concatenation : Joining Strings using + operator

	-> + : Concatenation (Strings)
	-> + : Addition (Numeric)

	-> NOTE : Polymorphism (Multiple Forms)

-> Interpolation : Replacing Placeholders with Actual Values

	-> Supports only from Python 3 onwards
	-> We use {} with f-strings (string formatted literals)

-> Operators

	-> Special symbols, that perform operations on Variables and their Values

	-> Operators Categorization

		-> Arithmetic Operators 

			-> + - * / % 
			-> // : floor division (same as division, but round of value)
			-> ** : exponentiation (for powers)
		
		-> Compound Assignment Operators

			-> Combine Arithmetic Operators with Assignment Operator(=)
			-> Used for concise code(short hand code)

			-> x = 10
			-> x = x + 5

			-> x += 5 
			-> += *= -= etc
		
		-> Comparison Operators 

			-> Used to compare values 
			-> O/P is True/False (boolean)

			-> Primarily used with condition

				-> == (compare values equal )
				-> != (not equal to)
				-> > 
				-> <
				-> >=
				-> <=

		-> Logical Operators 

			-> Used to combine multiple conditions
			-> O/P is True/False (boolean)

				-> and
				-> or
				-> not

				X       Y       X and Y    X or Y    not X    not Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T     


		-> Membership Operators 

			-> Used if a sequence is present 

				-> in : return True if specified input is in given sequence 
				-> not in : return True if specified input is not in given sequence 

		-> Identity Operators

			-> Used to compare objects (memory)

				-> == used to compare values

			-> is : return True if both objects are same
			-> is not : return True if both objects are not same

		-> Bitwise Operators 

			-> Used in low level 

			-> Used to perform Comparison on BINARY LEVEL (010101001)

				-> AND(&) - Sets each bit to 1 if both bits are 1
                -> OR (|)- Sets each bit to 1 if one of bits is 1

September 11th
==============

-> Datatype

	-> Data types are Categories that define kind of data a variable can hold

	-> Numeric Types 

		-> int : whole numbers 1,2,-10 etc
		-> float : decimal numbers 1.5, 3.5 10.0 etc
		-> complex : a + ib (i is imaginary -> in python it's j)
				   c = 3 + 5j
	
	-> Text Type 

		-> str : string is a sequence of characters enclosed in "" or ''

	-> Boolean Type

		-> bool : Represents True / False	

	-> Sequence Type 

		-> List : Store Multiple elements, separated with , and declared inside []

		-> Tuple : Store Multiple elements, separated with , and declared inside ()

		-> Set : Store Multiple elements, separated with , and declared inside {}

	-> Mapping Type

		-> Dictionary : Stores Key Value pairs (each pair is called item) 
			separated with , and declared inside {}
	
	-> None Type

		-> Nothing i.e represents No value / Absence of value

	-> NOTE : predefined Datatypes are part of python library 

	-> NOTE : User defined Datatypes can be created by user/developer based on requirements

	-> Type Conversion

		-> Convert One Datatype to another Datatype automatically

	-> Type Casting

		-> Convert One Datatype to another Datatype Manually

	
	-> Control Structures 

		-> Used to control the flow of execution 

		-> Types 

			-> Conditional Statements (Decision Making Statements)

			-> Looping Statements (Iteration Statements)

			-> Branching Statements (Jump Statements)	
		
		-> Conditional Statements (Decision Making Statements)

			-> Used to evaluate condition, execute one block of code if 
				the evaluation is True and execute another block of code 
				if evaluation is False

			-> Types Of Conditional Statements 

				-> if Statement : Run block of code, if the condition is True
				-> if else Statement : Run one block of code, if the condition is True and
					Run another block of code, if the condition is False
				-> elif ladder : Runs multiple if else blocks 
				-> match-case Statement : Alternative to  if else, when you have multiple
					conditions for a single variable (introduced from python 3)

			-> NOTE : indentation refers to spaces at the beginning if line
					that define code blocks (conditionals, loops, classes etc) 

					-> indentation Rules
					   
					   -> Either use a tab or spaces , but not both
					   		-> how many spaces (at least 1) -> python recommended is 4 spaces
					   -> All lines in the same block must have same indentation level
			
			-> NOTE : To make apps more dynamic i.e giving the user to give input 

				-> input() : function used to take input from keyboard as a string 
			
			-> Ternary Operator : Allows you to write if-else in concise form
			value_if_true if condition else value_if_false

12th September
================

-> elif ladder used for multiple condition checks
-> match case , it is introduced in python 3.1 , used for multi conditions 

-> Nested conditionals
		Conditionals inside conditionals
-> looping statements
	iterative statements , one after another. 
	used to execute a block of code repeatedly based on a condition 
	->while loop ; runs a block of code as long as the condition is true, 
			used when we do not know no. of iterations in advance
	-> for loop ; used for iterating over a sequence / used when we know no of iterations in advance
		it is mainly used for working with sequences
	dir()
	used to list all the attributes and functionalities of an object
	if an object is iterable it has '__iter__'

	range()
	range is used to generate a sequence of numbers
	range(start, stop, step)
	start: starting value to generate sequence by default is 0 (included)
	stop: ending value to stop generating the sequence (excluded)
	step: increment the count default is 1

15th September
================

-> Nested Loops : Loops inside loops

-> Branching / Jump Statements 

	-> break : used to exit loop

	-> continue : skip current iteration in loop

	-> pass : used as Placeholder, does Nothing


-> Strings 

	-> One of the most widely used data types in python

	-> String : Sequence of characters enclosed in single or double quotes (recommended)
				triple quotes (not recommended) 

	-> Indexing : Python allows you to access individual character inside string using index number

	-> text = "python"


	 0  1  2   3  4  5 (Positive Index)
	 p  y  t   h  o  n
	-6 -5  -4 -3  -2 -1 (Negative Index)

15th September
================

-> Slicing 

	-> extracting a portion of string from original string using index numbers
		i.e access a range of characters in string

	-> range(start, stop, step)

	-> slice[start:stop:step] 

		start: starting value to generate sequence by default is 0 (included)
		stop: ending value to stop generating the sequence (excluded)
		step: increment the count default is 1

	-> Positive Slicing 

	-> Negative Slicing

	-> String Repetition using * operator

	-> String Concatenation joining strings 
	
17th September
================

-> String Methods 

-> Strings are Immutable (cannot change)

-> Application to work with strings

19th September
================

-> Simple Data Types : One Value

	-> data = 10

-> Complex Data Types : Multiple Values

	-> data = [10,20,30,40,50]

-> In python we to store more than one value, we have following Classes 

	-> List 
	-> Tuple
	-> Dictionary
	-> Set

-> Lists 

	-> List is a Data Structure which allows you to stores multiples values in a single variable

	-> Lists are represented using [] or using list class

	-> Accessing Data in lists 

		-> Like in Strings, for lists we have Index and it starts from Zero

		-> Has both positive and negative index 

		-> Indexing is same as strings 

		-> Slicing is same as strings 

		-> nums = [10,20,30,40,50]

			0. 1  2. 3. 4
			10,20,30,40,50
			-5 -4 -3 -2	-1

	-> slice[start:stop:step] 

		start: starting value to generate sequence by default is 0 (included)
		stop: ending value to stop generating the sequence (excluded)
		step: increment the count default is 1

	-> Use Operators 

	-> Use Conditionals

	-> Use Loops 

	-> Duplicates Allowed 

	-> List Methods / List operations

	-> List Characteristics
	
		-> Ordered 

		-> Mutable (add / remove)

		-> Duplicates Allowed 

		-> Different Data Types Allowed -> Yes 

23rd September
================

	-> Tuples is a Data Structure which allows you to stores multiples values in a single variable

	-> Tuples are represented using ( ) or using tuple class

	-> Accessing Data in Tuples 

		-> Like in Strings, for Tuples we have Index and it starts from Zero

		-> Has both positive and negative index 

		-> Indexing is same as strings 

		-> Slicing is same as strings 

		-> nums = (10,20,30,40,50)

			0. 1  2. 3. 4
			10,20,30,40,50
			-5 -4 -3 -2	-1

	-> slice[start:stop:step] 

		start: starting value to generate sequence by default is 0 (included)
		stop: ending value to stop generating the sequence (excluded)
		step: increment the count default is 1

	-> Use Operators 

	-> Use Conditionals

	-> Use Loops 

	-> Duplicates Allowed 

	-> Tuples Methods / Tuples operations

	-> Tuples Characteristics
	
		-> Ordered 

		-> Immutable (cannot modify)

		-> Duplicates Allowed 

		-> Different Data Types Allowed -> Yes 

	-> Tuples are READ ONLY LISTS 


-> Dictionaries (Mapping Type Of Data)

	-> Dictionaries is a Data Structure which allows you to stores multiples key values in a single variable

		-> key:value (item / pair)

	-> Dictionaries are represented using { } or using dict class

	-> NO Indexing

	-> NO Slicing 

	-> Rules 

		-> keys should be immutable data only
		-> values can be any object 

		-> key should not be duplicated(duplicates will be overridden)

		-> More than 90% of time, keys will be strings 
	
	-> Dictionaries Characteristics
	
		-> Ordered 

		-> Mutable (can modify)

		-> Duplicates Allowed 

			-> values can be duplicated 
			-> key will not allow duplicated, will override

		-> Different Data Types Allowed -> Yes 

			-> key should be immutable
			-> values can be any data 
			